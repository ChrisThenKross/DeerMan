//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7dba3aad-54d7-4b8e-926a-a30a0cb388f2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5736a37d-2501-4179-b2c9-5a4d63b0f2d7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""mouseLook"",
                    ""type"": ""Value"",
                    ""id"": ""cdea8137-e84d-4bac-88a4-d7d6edcd8e6a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AddFireball"",
                    ""type"": ""Button"",
                    ""id"": ""d49b038f-bc70-486a-8069-60bccbb5a9dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AddIce"",
                    ""type"": ""Button"",
                    ""id"": ""a52bd3d6-4790-4287-820e-e71a9961a84c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AddHorn"",
                    ""type"": ""Button"",
                    ""id"": ""54abf390-32b0-4518-a7f3-f32d6d932eb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CastQueue"",
                    ""type"": ""Button"",
                    ""id"": ""6e9210f9-b9f8-4814-bef9-3c6bf42f2cce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ff34d90a-97e9-4e15-b877-cb0ddbe189ff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a6922dd5-3e70-4a44-9867-5e679ec8384d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""98b4ee3b-5d73-4d17-be18-2329e6477060"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f5841bba-7e90-4378-b813-fd480458528e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""589cdc60-5935-4c1a-9e13-124ad36be93d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""627ec482-5f5e-4a9b-98e8-8b330942fc06"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5b93c43-d4d7-48c3-9fe9-c36d9d8be7e4"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddFireball"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54f31d5e-f8e8-459b-8844-fc240e03c2bd"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddIce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a488bebd-5ba3-4d24-b7cf-e706d55ed55e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddHorn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e530ff30-902e-41bf-9bdb-8c92f20801b1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastQueue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_mouseLook = m_Player.FindAction("mouseLook", throwIfNotFound: true);
        m_Player_AddFireball = m_Player.FindAction("AddFireball", throwIfNotFound: true);
        m_Player_AddIce = m_Player.FindAction("AddIce", throwIfNotFound: true);
        m_Player_AddHorn = m_Player.FindAction("AddHorn", throwIfNotFound: true);
        m_Player_CastQueue = m_Player.FindAction("CastQueue", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_mouseLook;
    private readonly InputAction m_Player_AddFireball;
    private readonly InputAction m_Player_AddIce;
    private readonly InputAction m_Player_AddHorn;
    private readonly InputAction m_Player_CastQueue;
    public struct PlayerActions
    {
        private @InputManager m_Wrapper;
        public PlayerActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @mouseLook => m_Wrapper.m_Player_mouseLook;
        public InputAction @AddFireball => m_Wrapper.m_Player_AddFireball;
        public InputAction @AddIce => m_Wrapper.m_Player_AddIce;
        public InputAction @AddHorn => m_Wrapper.m_Player_AddHorn;
        public InputAction @CastQueue => m_Wrapper.m_Player_CastQueue;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @mouseLook.started += instance.OnMouseLook;
            @mouseLook.performed += instance.OnMouseLook;
            @mouseLook.canceled += instance.OnMouseLook;
            @AddFireball.started += instance.OnAddFireball;
            @AddFireball.performed += instance.OnAddFireball;
            @AddFireball.canceled += instance.OnAddFireball;
            @AddIce.started += instance.OnAddIce;
            @AddIce.performed += instance.OnAddIce;
            @AddIce.canceled += instance.OnAddIce;
            @AddHorn.started += instance.OnAddHorn;
            @AddHorn.performed += instance.OnAddHorn;
            @AddHorn.canceled += instance.OnAddHorn;
            @CastQueue.started += instance.OnCastQueue;
            @CastQueue.performed += instance.OnCastQueue;
            @CastQueue.canceled += instance.OnCastQueue;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @mouseLook.started -= instance.OnMouseLook;
            @mouseLook.performed -= instance.OnMouseLook;
            @mouseLook.canceled -= instance.OnMouseLook;
            @AddFireball.started -= instance.OnAddFireball;
            @AddFireball.performed -= instance.OnAddFireball;
            @AddFireball.canceled -= instance.OnAddFireball;
            @AddIce.started -= instance.OnAddIce;
            @AddIce.performed -= instance.OnAddIce;
            @AddIce.canceled -= instance.OnAddIce;
            @AddHorn.started -= instance.OnAddHorn;
            @AddHorn.performed -= instance.OnAddHorn;
            @AddHorn.canceled -= instance.OnAddHorn;
            @CastQueue.started -= instance.OnCastQueue;
            @CastQueue.performed -= instance.OnCastQueue;
            @CastQueue.canceled -= instance.OnCastQueue;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
        void OnAddFireball(InputAction.CallbackContext context);
        void OnAddIce(InputAction.CallbackContext context);
        void OnAddHorn(InputAction.CallbackContext context);
        void OnCastQueue(InputAction.CallbackContext context);
    }
}
